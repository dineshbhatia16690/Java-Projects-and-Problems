{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs48 \cf0 import java.lang.reflect.Array;\
import java.util.HashMap;\
import java.util.HashSet;\
import java.util.Iterator;\
import java.util.LinkedHashSet;\
import java.util.LinkedList;\
import java.util.Map;\
import java.util.PriorityQueue;\
import java.util.Set;\
import java.util.Stack;\
\
import javax.swing.tree.TreeNode;\
\
public class Test \{\
\
	public int[] nextGreaterElement(int[] findNums, int[] nums) \{\
        \
		Map<Integer, Integer> map = new HashMap<>(); // map from x to next greater element of x\
        Stack<Integer> stack = new Stack<>();\
        \
        //first fill the map based on nums array\
        for (int num : nums) \{\
            while (!stack.isEmpty() && stack.peek() < num)\
                map.put(stack.pop(), num);\
            stack.push(num);\
        \}\
        // now check the map for corresponding elements of findnums as a key in the map, if they are present\
        // get their next greater number as the value in the map otherwise \
        for (int i = 0; i < findNums.length; i++)\
            findNums[i] = map.getOrDefault(findNums[i], -1);\
        \
        return findNums;\
    \}\
	\
	\
	\
	public static void main(String[] args) \{\
		\
		int[] nums1 = \{4,1,2\};\
		int[] nums2 = \{1,3,4,2\};\
		\
		int[] temp = new Test().nextGreaterElement(nums1, nums2);\
		for(int i=0;i<temp.length;i++)\{\
			System.out.printf("%d ",temp[i]);\
		\}\
		\
\
	\}\
\}\
}